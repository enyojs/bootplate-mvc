[
    {
        "basename": "bootplate-mvc",
        "isDirectory": true,
        "isFile": false,
        "path": "/",
        "parent": null
    },
    {
        "basename": "source",
        "isDirectory": true,
        "isFile": false,
        "path": "/source",
        "parent": "/"
    },
    {
        "basename": "apps",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/apps",
        "parent": "/source"
    },
    {
        "basename": "Sample.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/apps/Sample.js",
        "parent": "/source/apps",
        "documentation": " <!-- generated from template for sample.js -->      <div class=\"file\">   <div>     <span class=\"title\">Sample.js</span>     <span class=\"path\">source/apps/Sample.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.Application</code> kind</h2>\n\n<p>There can be multiple <code>enyo.Application</code>s running simultaneously\nif you needed. In our case, we only need one. That being said the\nconcept of an <code>enyo.Application</code> is simple: coordinate startup and\ninitialization of a group of objects, if there is a view, render that\nwhen appropriate.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>While the namespace of the application is <code>Sample</code> the namespace\nof the instanced application is up to the developers discretion.\nGo look at our <code>start.js</code> file if you haven't to see how this was\ndone.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Application&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.Application&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>The <code>autoStart</code> flag is <code>true</code> by default but its explicitly\ndesignated here for clarity. Since it is true, the <code>enyo.Application</code>\n<code>start</code> method will be executed as soon as the constructor is called\non our application.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">autoStart</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Every application can potentially <em>own a single view</em>. This means that\nit can programatically determine when to render its <em>view</em> into the\nDOM and where to render it when it does.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">view</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.RootView&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>The <code>enyo.Application</code> also lets us declare what controllers we want\nto initialize for this application at the <em>application scope</em>. This is\na <em>very important concept</em>. Notice the name properties of these\ndeclarations and also note the namespace of this <em>kind</em>. Its <code>Sample</code>.\nBy default, the <code>enyo.Application</code> will attempt to create instances of\nthese controllers in the namespace of <em>the application kind that owns them</em>.\nIn our case, this means that when the application is created there should\nimmediately be available 2 controllers on the <code>Sample</code> object: <code>Sample.panels</code>\nand <code>Sample.documents</code>. This allows any other objects in the application to\nreference these controllers at those paths. It is possible to instantiate\nthem in a different namespace (or none at all) by setting a flag on these\ndeclarations <code>global: true</code>. The application will not attempt to prefix the\n<code>name</code> with the namespace of the given <em>kind</em>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">controllers</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.panels&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.PanelsController&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.files&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.FilesController&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "controllers",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/controllers",
        "parent": "/source"
    },
    {
        "basename": "EditorController.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/controllers/EditorController.js",
        "parent": "/source/controllers",
        "documentation": " <!-- generated from template for editorcontroller.js -->      <div class=\"file\">   <div>     <span class=\"title\">EditorController.js</span>     <span class=\"path\">source/controllers/EditorController.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.EditorController</code> kind</h2>\n\n<p>The editor controller is responsible for setting up the content in\nthe <code>Sample.Editor</code> view. It extends <code>enyo.ModelController</code> and proxies\nthe selected record.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>There is convention (not a requirement) to keep the names of\npresentation objects closely linked with those of their\nassociated controllers. The controller name is typically formed\nby appending <code>\"Controller\"</code> to the name of the view.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.EditorController&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Be sure to read the documentation for <code>enyo.ModelController</code>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.ModelController&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Even though the textarea is in the view, we are owned by the\nview and all bubbled events are also passed to us. We have access\nto the entirety of the view that owns us via the <code>owner</code> property.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">handlers</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">oninput</span><span class=\"o\">:</span> <span class=\"s2\">&quot;input&quot;</span><span class=\"p\">,</span>\n        <span class=\"nx\">onready</span><span class=\"o\">:</span> <span class=\"s2\">&quot;indexChanged&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">constructor</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n       <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inherited</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n       <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">panels</span><span class=\"p\">.</span><span class=\"nx\">addDispatchTarget</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We map the selected index from the panels controller to our own\n<code>index</code> property.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.panels.index&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;index&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Note that we can set up a <code>changed</code> event listener for a property\nthat only exists locally through bindings.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">indexChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">index</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">panels</span><span class=\"p\">.</span><span class=\"nx\">at</span><span class=\"p\">(</span><span class=\"nx\">idx</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">model</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">model</span> <span class=\"o\">!==</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;model&quot;</span><span class=\"p\">,</span> <span class=\"nx\">model</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">input</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Very important: Let changes in the model propagate to changes\nin the view. We translate a UI-layer <code>oninput</code> event into a\nmodel-layer change, and the rest of the UI is automatically\nupdated to reflect the change.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">({</span><span class=\"nx\">header</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">owner</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">)});</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "FilesController.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/controllers/FilesController.js",
        "parent": "/source/controllers",
        "documentation": " <!-- generated from template for filescontroller.js -->      <div class=\"file\">   <div>     <span class=\"title\">FilesController.js</span>     <span class=\"path\">source/controllers/FilesController.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.FilesController&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.CollectionController&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">collection</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.NodeCollection&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">autoLoad</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">index</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nx\">ready</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nx\">handlers</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">oncollectionreset</span><span class=\"o\">:</span> <span class=\"s2\">&quot;didReset&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">didReset</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">syncModelsToNodes</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">back</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">===</span> <span class=\"nx\">idx</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"nx\">idx</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sender</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">originator</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;content&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">welcome</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">syncModelsToNodes</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">models</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">models</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">model</span><span class=\"p\">;</span>\n        <span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">models</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">addNodeForModel</span><span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">);</span>\n        <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n        <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">where</span><span class=\"p\">({</span><span class=\"nx\">basename</span><span class=\"o\">:</span> <span class=\"s2\">&quot;start.js&quot;</span><span class=\"p\">})[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">owner</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">.</span><span class=\"nx\">reflow</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;ready&quot;</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">addNodeForModel</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;parent&quot;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">view</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">owner</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">basename</span> <span class=\"o\">=</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;basename&quot;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">node</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">parent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">({</span>\n                <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;root&quot;</span><span class=\"p\">,</span>\n                <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Node&quot;</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getFilePath</span><span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">);</span>\n            <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nx\">parent</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">({</span>\n                <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"nx\">basename</span><span class=\"p\">,</span>\n                <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Node&quot;</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">}</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>note this is one-way entry for this view-kind\nas it was not designed to worry about removal\nof nodes once they are entered</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setFilePath</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">node</span><span class=\"p\">);</span>\n        <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;model&quot;</span><span class=\"p\">,</span> <span class=\"nx\">model</span><span class=\"p\">);</span>\n        <span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">setFilePath</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">node</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">!==</span> <span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/.&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;_files_.&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">node</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">getFilePath</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">!==</span> <span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/.&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;_files_.&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">nodeTap</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sender</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">originator</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;model&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;isFile&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "PanelsController.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/controllers/PanelsController.js",
        "parent": "/source/controllers",
        "documentation": " <!-- generated from template for panelscontroller.js -->      <div class=\"file\">   <div>     <span class=\"title\">PanelsController.js</span>     <span class=\"path\">source/controllers/PanelsController.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.PanelsController</code> kind</h2>\n\n<p>This is the kind definition for the global singleton application\npanels controller (<code>Sample.panels</code>) instantiated in the <code>main</code> function\nin <code>Core.js</code>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We give the kind a name in the application namespace.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.PanelsController&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We base this kind on <code>enyo.CollectionController</code> because we know\nwe need the collection controller's built-in methods. Even\nthough this is an <code>enyo.CollectionController</code>, we can add\nfunctionality because it's ultimately just an <code>enyo.Controller</code>\nwith additional features.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.CollectionController&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We already know what the collection kind is going to be for this\ncontroller. Furthermore, we know that there will not be a shared\nglobal instance of the collection. We will hand this controller\na kind reference and it will instantiate the collection kind when\nit is created.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">collection</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.RollerCollection&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>The entire application has state. One possible state is the\nis the editing state. While the <code>isEditing</code> property is\ndesigned to be used directly with the <code>Sample.Roller</code> view kind,\nany other component in the application may respond to it as\nwell (as we will see).</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">isEditing</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>This is an example of abstracting common elements to the\noutermost commonly-available controller to be shared between\nobjects that have no direct connection but may share some\nstate. In this case, some of the application's functionality\nis separated because of how it needs to be represented in the\nDOM, but both elements need to know what <code>index</code> the roller\nhas selected. Using bindings, we make this property available\nfrom the outermost controller, so that any instance of\n<code>enyo.View</code> or <code>enyo.Controller</code> may access it as needed.</p>\n\n<p>This value is actually bound to the view that implements the\n<code>enyo.Panels</code> that coordinates the presentation of these\nmodels in the <code>enyo.Collection</code>. The binding to this property\nis initiated in the view.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">index</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>A simple boolean to keep track of whether or not the animation\nis running</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">isStarted</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>The timer reference as returned by <code>setInterval</code></p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">timer</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>The following methods are actually dispatch event targets of an\n<code>enyo.View</code> (the toolbar). These methods are executed in response\nto events bubbled from the view layer.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">toggleEditing</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;isEditing&quot;</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isEditing</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>When the <code>\"Add\"</code> button is tapped, we add a new model to the\ncollection.  Its properties have the default values defined in\n<code>enyo.Model</code>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">addModel</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Here we call the <code>add</code> method that is proxying the underlying\ncollection API. Because we pass in an empty hash, it knows to\ncreate the model using all of the defaults.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">({});</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>When the <code>\"Next\"</code> button is tapped, we have some additional things\nto do to prepare the operation.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">nextModel</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We freeze the current timer-driven operation/animation.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stop</span><span class=\"p\">();</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We call our <code>next</code> method to select the next index.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">();</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Then we restart the timer operation to ensure the animation will\ncontinue.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isEditing</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Begins animation of any of the panels for the roller.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">start</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>If we're already started, we have nothing to do.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isStarted</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Assign the <code>timer</code> property as we create a loop to animate\nevery 5 seconds. A great opportunity to use <code>enyo.bind</code>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timer</span> <span class=\"o\">=</span> <span class=\"nx\">setInterval</span><span class=\"p\">(</span><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">next</span><span class=\"p\">),</span> <span class=\"mi\">5000</span><span class=\"p\">);</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We'll use the setter to notify anyone who happens to be\nlistening. It is good practice to do this so that if you add\na listener later you won't wonder why the value is changing\nbut the observer is being notified. (Though there are cases\nin which it's desirable <em>not</em> to use the setter.)</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;isStarted&quot;</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Stops animation if we are animating.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">stop</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Clear the interval timer.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timer</span><span class=\"p\">)</span> <span class=\"nx\">clearInterval</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">timer</span><span class=\"p\">);</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Reset our <code>isStarted</code> property, again using the setter\nso that we trigger listeners (if there are any).</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;isStarted&quot;</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Selects our next index.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">next</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Notice we're using and setting our local <code>index</code>\nproperty, which is part of a two-way binding.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"kd\">var</span> <span class=\"nx\">idx</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;length&quot;</span><span class=\"p\">);</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>If the next value for index goes beyond the number of\navailable panels, reset it to 0 so we can start over.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"o\">===</span> <span class=\"nx\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Otherwise, increment the index and move forward.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"o\">++</span><span class=\"nx\">idx</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Listens for and lets us respond to changes in editing state.\nRelies on the default behavior that if the <code>isEditing</code> property\nis modified, the <code>isEditingChanged</code> method will be called (if\nsuch a method exists).</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">isEditingChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>If we are editing now, stop animating.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isEditing</span> <span class=\"o\">===</span> <span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stop</span><span class=\"p\">();</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Otherwise, start animating because we just left the editing\nstate.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">else</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Listens for length change notifications, so we can automatically\nbegin animating when appropriate.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">lengthChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>If the length (i.e., the number of panels) is greater than\n1, start animating.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>If the length has fallen to 1, stop animating.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stop</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "models",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/models",
        "parent": "/source"
    },
    {
        "basename": "collections",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/models/collections",
        "parent": "/source/models"
    },
    {
        "basename": "NodeCollection.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/models/collections/NodeCollection.js",
        "parent": "/source/models/collections",
        "documentation": " <!-- generated from template for nodecollection.js -->      <div class=\"file\">   <div>     <span class=\"title\">NodeCollection.js</span>     <span class=\"path\">source/models/collections/NodeCollection.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">NodeCollection</span> <span class=\"o\">=</span> <span class=\"nx\">Backbone</span><span class=\"p\">.</span><span class=\"nx\">Collection</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n        <span class=\"nx\">model</span><span class=\"o\">:</span> <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">NodeModel</span><span class=\"p\">,</span>\n        <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s2\">&quot;assets/filestructure.json&quot;</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "RollerCollection.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/models/collections/RollerCollection.js",
        "parent": "/source/models/collections",
        "documentation": " <!-- generated from template for rollercollection.js -->      <div class=\"file\">   <div>     <span class=\"title\">RollerCollection.js</span>     <span class=\"path\">source/models/collections/RollerCollection.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.RollerCollection</code></h2>\n\n<p>It is helpful to abstract your application objects--for clarity's\nsake, if nothing else. In this case, we have no special properties\nin our collection definition except for <code>model</code>, which must be set.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">RollerCollection</span> <span class=\"o\">=</span> <span class=\"nx\">Backbone</span><span class=\"p\">.</span><span class=\"nx\">Collection</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n        <span class=\"nx\">model</span><span class=\"o\">:</span> <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">RollerModel</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "models",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/models/models",
        "parent": "/source/models"
    },
    {
        "basename": "NodeModel.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/models/models/NodeModel.js",
        "parent": "/source/models/models",
        "documentation": " <!-- generated from template for nodemodel.js -->      <div class=\"file\">   <div>     <span class=\"title\">NodeModel.js</span>     <span class=\"path\">source/models/models/NodeModel.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">NodeModel</span> <span class=\"o\">=</span> <span class=\"nx\">Backbone</span><span class=\"p\">.</span><span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n        <span class=\"nx\">defaults</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">isDirectory</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nx\">isFile</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nx\">parent</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n            <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"nx\">basename</span><span class=\"o\">:</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "RollerModel.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/models/models/RollerModel.js",
        "parent": "/source/models/models",
        "documentation": " <!-- generated from template for rollermodel.js -->      <div class=\"file\">   <div>     <span class=\"title\">RollerModel.js</span>     <span class=\"path\">source/models/models/RollerModel.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.RollerModel</code></h2>\n\n<p>Models are native Backbone models and should be implemented\naccording to their API.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">RollerModel</span> <span class=\"o\">=</span> <span class=\"nx\">Backbone</span><span class=\"p\">.</span><span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n        <span class=\"nx\">defaults</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">header</span><span class=\"o\">:</span> <span class=\"s2\">&quot;You just created a new record!&quot;</span><span class=\"p\">,</span>\n            <span class=\"nx\">editing</span><span class=\"o\">:</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "Scaffold.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/models/Scaffold.js",
        "parent": "/source/models",
        "documentation": " <!-- generated from template for scaffold.js -->      <div class=\"file\">   <div>     <span class=\"title\">Scaffold.js</span>     <span class=\"path\">source/models/Scaffold.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The Scaffolding</h2>\n\n<p>We want there to be some messages in the roller when the user first\nsees it, so we create an array of sample records and add these to the\ncollection during app startup. (You'll see this happen in <code>Core.js</code>.)</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">Scaffold</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;Roller&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"nx\">header</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Welcome to a new pattern of development in Enyo.js&quot;</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"nx\">header</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Make use of the new bindings, observers and notifications&quot;</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"nx\">header</span><span class=\"o\">:</span> <span class=\"s2\">&quot;A model layer as strong as Backbone.js&quot;</span><span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "start.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/start.js",
        "parent": "/source",
        "documentation": " <!-- generated from template for start.js -->      <div class=\"file\">   <div>     <span class=\"title\">start.js</span>     <span class=\"path\">source/start.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>enyo.ready</code> method</h2>\n\n<p>Some things need to occur only after the <code>document</code> has fully\ninitialized and is ready - thus ensuring the entirety of source\nhas been loaded. You can call <code>enyo.ready</code> and pass it a function\n(and an optional context) as many times as you need and those method\nwill only execute once the <code>document</code> is completely ready.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>This is a very imporant declaration. This is where we instance\nour application. We arbitrarily assign it to a global variable\n<code>app</code> for reference if we need it. All other components of this\napplication are instanced in the <code>Sample</code> namespace. See the\n<code>apps/Sample.js</code> file for more information on namespaces and what\nthis actually means.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">();</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>When our application renders for the first time we want it to have\nsome data already. Since we're not loading from a remote source we\ngo ahead and use some scaffolding we setup in <code>models/Scaffold.js</code>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">panels</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">Sample</span><span class=\"p\">.</span><span class=\"nx\">Scaffold</span><span class=\"p\">.</span><span class=\"nx\">Roller</span><span class=\"p\">);</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Now that data is present for the <em>view</em> layer to make use of, lets\ngo ahead and render it to the DOM. We could have had the application\nautomatically render when it was created but in <code>apps/Sample.js</code> we\ndeliberately told it not to so we can prepare our scaffold data before\nthe <em>view</em> layer was initialized.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "views",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/views",
        "parent": "/source"
    },
    {
        "basename": "Main",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/views/Main",
        "parent": "/source/views"
    },
    {
        "basename": "Divider.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/Main/Divider.js",
        "parent": "/source/views/Main",
        "documentation": " <!-- generated from template for divider.js -->      <div class=\"file\">   <div>     <span class=\"title\">Divider.js</span>     <span class=\"path\">source/views/Main/Divider.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.Divider</code> kind</h2>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Divider&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;divider&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.Toolbar&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.files&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">selection</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">ModelController</span><span class=\"p\">(),</span>\n    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.selection&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.selection.model&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.index&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.back.disabled&quot;</span><span class=\"p\">,</span> <span class=\"nx\">transform</span><span class=\"o\">:</span> <span class=\"s2\">&quot;back&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.selection.path&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.filename.content&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.Button&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Welcome&quot;</span><span class=\"p\">,</span> <span class=\"nx\">ontap</span><span class=\"o\">:</span> <span class=\"s2\">&quot;welcome&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.Button&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Files&quot;</span><span class=\"p\">,</span> <span class=\"nx\">ontap</span><span class=\"o\">:</span> <span class=\"s2\">&quot;files&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;back&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.Button&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Back&quot;</span><span class=\"p\">,</span> <span class=\"nx\">ontap</span><span class=\"o\">:</span> <span class=\"s2\">&quot;back&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">,</span> <span class=\"nx\">ontap</span><span class=\"o\">:</span> <span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">back</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">!==</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">destroy</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">selection</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">selection</span><span class=\"p\">.</span><span class=\"nx\">destroy</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inherited</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "Documents",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/views/Main/Documents",
        "parent": "/source/views/Main"
    },
    {
        "basename": "Documents.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/Main/Documents/Documents.js",
        "parent": "/source/views/Main/Documents",
        "documentation": " <!-- generated from template for documents.js -->      <div class=\"file\">   <div>     <span class=\"title\">Documents.js</span>     <span class=\"path\">source/views/Main/Documents/Documents.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Documents&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.Panels&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">arrangerKind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.CollapsingArranger&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">realtimeFit</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;documents&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">selection</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.files&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">ready</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.index&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.index&quot;</span><span class=\"p\">,</span> <span class=\"nx\">oneWay</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.selection&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.documentation.controller.model&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.selection&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.selection&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.ready&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.ready&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;welcome&quot;</span><span class=\"p\">,</span> <span class=\"nx\">allowHtml</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;documents-panel&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;tree&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.FileTree&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;documents-panel layered&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;documentation&quot;</span><span class=\"p\">,</span> <span class=\"nx\">fit</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.DocumentationView&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;documents-panel layered&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">create</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inherited</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;welcome&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">selectionChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">selection</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;selection&quot;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">ready</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">selection</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">ready</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">!==</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>This is a computed property that, on its initial\nrequest will issue an asynchronous ajax call for\nthe file content (html).</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">welcome</span><span class=\"o\">:</span> <span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">Computed</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">welcome</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">content</span><span class=\"p\">)</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>If the content parameter exists then we are\nbeing called as a setter.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>            <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;content&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"p\">);</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">reflow</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We need to issue the ajax request for the\nhtml content of our welcome child-view.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>            <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">Ajax</span><span class=\"p\">({</span><span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s2\">&quot;assets/Welcome.html&quot;</span><span class=\"p\">,</span> <span class=\"nx\">handleAs</span><span class=\"o\">:</span> <span class=\"s2\">&quot;text&quot;</span><span class=\"p\">});</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">(</span><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">welcome</span><span class=\"p\">)).</span><span class=\"nx\">go</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}),</span>\n    <span class=\"nx\">reflow</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inherited</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n        <span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">ch</span><span class=\"p\">;</span>\n            <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">applyStyle</span><span class=\"p\">(</span><span class=\"s2\">&quot;bottom&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">);</span>\n            <span class=\"nx\">ch</span> <span class=\"o\">=</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">getBounds</span><span class=\"p\">().</span><span class=\"nx\">height</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">ch</span> <span class=\"o\">&gt;</span> <span class=\"nx\">height</span><span class=\"p\">)</span> <span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"nx\">ch</span><span class=\"p\">;</span>\n            <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">applyStyle</span><span class=\"p\">(</span><span class=\"s2\">&quot;bottom&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">applyStyle</span><span class=\"p\">(</span><span class=\"s2\">&quot;height&quot;</span><span class=\"p\">,</span> <span class=\"nx\">height</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;px&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.DocumentationView&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.ModelController&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;documentation&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">allowHtml</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.documentation&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.content&quot;</span><span class=\"p\">,</span> <span class=\"nx\">transform</span><span class=\"o\">:</span> <span class=\"s2\">&quot;safely&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">contentChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inherited</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">.</span><span class=\"nx\">reflow</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">safely</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">direction</span><span class=\"p\">,</span> <span class=\"nx\">binding</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">exists</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "FileTree.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/Main/Documents/FileTree.js",
        "parent": "/source/views/Main/Documents",
        "documentation": " <!-- generated from template for filetree.js -->      <div class=\"file\">   <div>     <span class=\"title\">FileTree.js</span>     <span class=\"path\">source/views/Main/Documents/FileTree.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.FileTree&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;tree&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.files&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;section&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">,</span> <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;header&quot;</span><span class=\"p\">,</span> <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;span&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Project Files&quot;</span><span class=\"p\">}]}]}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">create</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inherited</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Node&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.Node&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.ModelController&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">isDirectory</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nx\">expandable</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">expanded</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.isDirectory&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.isDirectory&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.isFile&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.isFile&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.basename&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.content&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">isDirectoryChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">true</span> <span class=\"o\">===</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isDirectory</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;icon&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;assets/folder-open.png&quot;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">isFileChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">true</span> <span class=\"o\">===</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isFile</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;icon&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;assets/file.png&quot;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">model</span><span class=\"o\">:</span> <span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">Computed</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"o\">?</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "Editor.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/Main/Editor.js",
        "parent": "/source/views/Main",
        "documentation": " <!-- generated from template for editor.js -->      <div class=\"file\">   <div>     <span class=\"title\">Editor.js</span>     <span class=\"path\">source/views/Main/Editor.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.Editor</code> kind</h2>\n\n<p>The editor is a view that is only visible when the application\nstate property (on <code>Sample.panels</code>) is set to true. This is only\nthe case when the \"Edit\" button is selected. By applying some CSS\n(using LESS) we can create the effect of an overlay. With the\nproper bindings, we can set up a text editor with hooks into the\nmodifiable content of the underlying record; proper bindings to\nother views can give us real-time UI updates with no additional work.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Editor&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;editor&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.FittableRows&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We use a custom controller kind, which we call a \"view controller\"\nbecause it is owned by this view and has awareness of it. Because\nwe set the <code>controller</code> property to a kind instead of an instance,\nthe view automatically creates an instance of the controller.</p>\n\n<p>All events from the view are propagated to the controller, which\nmay have its own named event handlers, listeners, and so on. If\na handler returns true, event propagation (bubbling) ends as\nexpected; if not, the event is routed right back up through the\nview. This allows us to take non-view-related logic and graft it\nonto a separate kind that has additional functionality.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.EditorController&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We are able to create bindings with relative paths for both the\n<code>from</code> and <code>to</code> properties. One thing to note is that the\ncontroller is subkinded from <code>enyo.ModelController</code>--this allows\nus to bind directly to properties of the controller as if it were\nthe model itself. It also means that we could make changes to the\nmodel directly (or swap it out altogether) and those changes would\nautomatically propagate back to the view because of bindings.\nNotice the explicit selection of target (<code>to</code>) properties. We bind\nto the <code>content</code> property on the <code>label</code> child, but to the <code>value</code>\nproperty on the <code>input</code> child.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.header&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.preview.content&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.header&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.input.value&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;info&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;info&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;There is a model &quot;</span> <span class=\"o\">+</span>\n            <span class=\"s2\">&quot;being used to store the message you see below. Edit it in the &quot;</span> <span class=\"o\">+</span>\n            <span class=\"s2\">&quot;textarea and see the real-time changes to the model and how they &quot;</span> <span class=\"o\">+</span>\n            <span class=\"s2\">&quot;propagate to the view&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[{</span><span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.InputDecorator&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;input-area&quot;</span><span class=\"p\">,</span> <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;input&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.TextArea&quot;</span><span class=\"p\">,</span> <span class=\"nx\">selectOnFocus</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">}]}]},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;label&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;input-label model-view&quot;</span><span class=\"p\">,</span> <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Preview:&quot;</span><span class=\"p\">,</span> <span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;h3&quot;</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;preview&quot;</span><span class=\"p\">}]}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">showingChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inherited</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">true</span> <span class=\"o\">===</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">showing</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "Main.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/Main/Main.js",
        "parent": "/source/views/Main",
        "documentation": " <!-- generated from template for main.js -->      <div class=\"file\">   <div>     <span class=\"title\">Main.js</span>     <span class=\"path\">source/views/Main/Main.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.Main</code> kind</h2>\n\n<p>This is the main presentation portion of the application. We place\nall the content for the app in a vertical scroller. The presentation\nis then broken down further into conveniently-named parts. While it\nisn't always necessary to break out each view into its own kind,\nit's generally a good idea to do so for any section that has specific\nbehavior or needs to encapsulate behavior beneath it by providing\nscope-relevant bindings to its children.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Notice that we use our application namespace for this kind.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Main&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.Scroller&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">fit</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>One useful feature of bindings is the ability to do\n\"transforms\"--conversions of data types such that different values\nexist on each end of the binding. However, sometimes you can achieve\nthe same effect without the transform, simply by binding the\nappropriate type.</p>\n\n<p>In the current example, we bind a state property of the panels\ncontroller (the boolean <code>isEditing</code>) to the <code>showing</code> property of\none of our child views (<code>editor</code>). This causes the <code>editor</code> child\nto only be visible when <code>isEditing</code> is set to true.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Of the many ways to work with <code>enyo.Bindings</code>, going through the\n<em>bindings</em> array is perhaps the most convenient. Note that we\nonly need to specify two properties when declaring a binding.</p>\n\n<p>Bindings are one-way by default. We will see an example of a\ntwo-way binding in another component.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.panels.isEditing&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.editor.showing&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">handlers</span><span class=\"o\">:</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Ugly hack for a Chrome-related bug.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"nx\">oninput</span><span class=\"o\">:</span> <span class=\"s2\">&quot;chromeworkaround&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.FittableRows&quot;</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;roller-editor-container&quot;</span><span class=\"p\">,</span> <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;toolbar&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Toolbar&quot;</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"nx\">fit</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;roller-editor&quot;</span><span class=\"p\">,</span> <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;roller&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Roller&quot;</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;editor&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Editor&quot;</span><span class=\"p\">}]}]},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;divider&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Divider&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;documents&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Documents&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;footer&quot;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;footer&quot;</span><span class=\"p\">,</span> <span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;footer&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>This is an ugly hack to force Chrome to re-render sublayers\nwith pseudo-transparent layers above them.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">chromeworkaround</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">platform</span><span class=\"p\">.</span><span class=\"nx\">chrome</span><span class=\"p\">)</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">roller</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "Roller",
        "isDirectory": true,
        "isFile": false,
        "path": "/source/views/Main/Roller",
        "parent": "/source/views/Main"
    },
    {
        "basename": "Roller.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/Main/Roller/Roller.js",
        "parent": "/source/views/Main/Roller",
        "documentation": " <!-- generated from template for roller.js -->      <div class=\"file\">   <div>     <span class=\"title\">Roller.js</span>     <span class=\"path\">source/views/Main/Roller/Roller.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.Roller</code> kind</h2>\n\n<p>The <code>Sample.Roller</code> kind is a modified <code>enyo.Panels</code> housed in a\ncontainer that dynamically creates panels based on the models in\na collection. In this case, the collection is proxied via our\npanels controller, <code>Sample.panels</code>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Roller&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;roller&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;roller-container&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>To receive events and have a relative path to the controller,\nwe set <code>Sample.panels</code> as our view's controller.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.panels&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">handlers</span><span class=\"o\">:</span> <span class=\"p\">{</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We need to provide our own handler for the event\nthat's bubbling up from the collection controller.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"nx\">oncollectionadd</span><span class=\"o\">:</span> <span class=\"s2\">&quot;didAddModel&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We've bound the <code>isEditing</code> state property to a local <code>isEditing</code>\nproperty so we can get change notifications; this is a two-way\nbinding.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.isEditing&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.isEditing&quot;</span><span class=\"p\">,</span> <span class=\"nx\">oneWay</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We bind our child's <code>index</code> property to our controller's <code>index</code>\nproperty in a two-way binding.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.panels.index&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.index&quot;</span><span class=\"p\">,</span> <span class=\"nx\">oneWay</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Not only have we wrapped the <code>enyo.Panels</code> views in this wrapper,\nwe've also set a very important property, <code>controller</code>, to the\npanels controller (which happens to be a collection controller),\nthus giving us access to the collection and its events as well as\nsending our events back to the controller.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;panels&quot;</span><span class=\"p\">,</span> <span class=\"nx\">margin</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.Panels&quot;</span><span class=\"p\">,</span> <span class=\"nx\">draggable</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">fit</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;roller-panels&quot;</span><span class=\"p\">,</span> <span class=\"nx\">wrap</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">arrangerKind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.TopBottomArranger&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>This method handles the event notifying us that a new model has\nbeen added. The event is dispatched from the panels controller.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">didAddModel</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sender</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">;</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>So we create a panel from the new model.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">createPanelForModel</span><span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">);</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We update the index of our actual <code>enyo.Panels</code> child to that\nof the new model so it is the one visible.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">panels</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">));</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We set our (two-way) binding state for <code>isEditing</code> to <code>true</code> so\nthe editor will become visible. Obviously, this is an indirect\nreaction to the state change. This view does not need to be aware\nof any details in the rest of the app.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;isEditing&quot;</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Creates a panel for a model.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">createPanelForModel</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">panel</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">panels</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">({</span><span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.RollerPanel&quot;</span><span class=\"p\">});</span>\n        <span class=\"nx\">panel</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;model&quot;</span><span class=\"p\">,</span> <span class=\"nx\">model</span><span class=\"p\">);</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Forcing a render here ensures that the new panel will correctly\nposition itself among the other existing panels.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">();</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Synchronizes any models in the collection to panels\nwe now need in our roller.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">syncPanelsToCollection</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">models</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">createPanelForModel</span><span class=\"p\">(</span><span class=\"nx\">model</span><span class=\"p\">)</span>\n        <span class=\"p\">},</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Does some view-centric work based on the state, adding and\nremoving classes, and thus triggering transitions in browsers\nthat support them.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">isEditingChanged</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isEditing</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">hasClass</span><span class=\"p\">(</span><span class=\"s2\">&quot;normal&quot;</span><span class=\"p\">))</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s2\">&quot;normal&quot;</span><span class=\"p\">);</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s2\">&quot;editing&quot;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">hasClass</span><span class=\"p\">(</span><span class=\"s2\">&quot;editing&quot;</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s2\">&quot;normal&quot;</span><span class=\"p\">);</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s2\">&quot;editing&quot;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We need to synchronize our collection (if any records already exist)\nwhen we're initialized so we overload our <code>create</code> method to\nexecute our <code>syncPanelsToCollection</code> method to get caught up.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">create</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">inherited</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">syncPanelsToCollection</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "RollerPanel.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/Main/Roller/RollerPanel.js",
        "parent": "/source/views/Main/Roller",
        "documentation": " <!-- generated from template for rollerpanel.js -->      <div class=\"file\">   <div>     <span class=\"title\">RollerPanel.js</span>     <span class=\"path\">source/views/Main/Roller/RollerPanel.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.RollerPanel</code> kind</h2>\n\n<p>Each time a new record is added to the collection at runtime,\na new panel based on this kind is created in our roller.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.RollerPanel&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;roller-panel&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Each <code>Sample.RollerPanel</code> creates its own <code>enyo.ModelController</code>\nas its <code>controller</code>. This allows the <code>Sample.Roller</code> kind to set\nthe newly created record as the value of this controller's\n<code>model</code> property. You can see this in action in the method\n<code>Sample.Roller.createPanelForModel()</code>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.ModelController&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">layoutKind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.FittableRowsLayout&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">fit</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Making sure that our views have the corrent content is as\neasy as creating the bindings for them. Here we declare a\nbinding from our controller's <code>header</code> property (remember\nthis isn't a real property of the <code>enyo.ModelController</code>;\nit is proxied from the underlying model) to our child's\n<code>content</code>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;controller.header&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;$.header.content&quot;</span><span class=\"p\">,</span> <span class=\"nx\">oneWay</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;header&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "Toolbar.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/Main/Toolbar.js",
        "parent": "/source/views/Main",
        "documentation": " <!-- generated from template for toolbar.js -->      <div class=\"file\">   <div>     <span class=\"title\">Toolbar.js</span>     <span class=\"path\">source/views/Main/Toolbar.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.Toolbar</code> kind</h2>\n\n<p>The toolbar in our application is interesting because\nof the number of things it connects to. It uses bindings\non the state of the application to control some of its\nvisual state and binds to some properties of the panels\ncontroller to obtain content in its views that automatically\nupdates when it changes.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We name the toolbar as a kind in the namespace of the\napplication.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Toolbar&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We base the new kind on <code>enyo.MoreToolbar</code> because we want\nthis application to look good and work well on mobile devices\nas well as desktop browsers.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.MoreToolbar&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>We arbitrarily set the DOM id for CSS selection and ease of\nreference later on. This is not strictly necessary.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;toolbar&quot;</span><span class=\"p\">,</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Although the toolbar does not have its own controller, we\ngive it a reference to the panels controller. This gives us\na relative reference to the controller from the view; more \nimportantly, it gives us automatic propagation of events.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">controller</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.panels&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">bindings</span><span class=\"o\">:</span> <span class=\"p\">[</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Notice that we have bindings from the <code>isEditing</code> property of\nthe panels controller to the <code>disabled</code> property of these\n<code>onyx.Button</code> objects. Previously, we used the same property\nto set the <code>showing</code> state of our <code>Sample.Editor</code> view.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.isEditing&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.edit.content&quot;</span><span class=\"p\">,</span> <span class=\"nx\">transform</span><span class=\"o\">:</span> <span class=\"s2\">&quot;editingTransform&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.isEditing&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.add.disabled&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.length&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.count.content&quot;</span><span class=\"p\">},</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Make special note of the fact that we are using a transform\nhere. We name the transform but elect to place it on the\n<code>owner</code> object of the binding. The binding will find it and\ntransform the <code>0-n</code> index to <code>1-n+1</code> for our benefit.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>        <span class=\"p\">{</span><span class=\"nx\">from</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.controller.index&quot;</span><span class=\"p\">,</span> <span class=\"nx\">to</span><span class=\"o\">:</span> <span class=\"s2\">&quot;.$.showing.content&quot;</span><span class=\"p\">,</span> <span class=\"nx\">transform</span><span class=\"o\">:</span> <span class=\"s2\">&quot;showingTransform&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&quot;app-label&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Enyo.js MVC&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;edit&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.Button&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Edit&quot;</span><span class=\"p\">,</span> <span class=\"nx\">ontap</span><span class=\"o\">:</span> <span class=\"s2\">&quot;toggleEditing&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;add&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.Button&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Add&quot;</span><span class=\"p\">,</span> <span class=\"nx\">ontap</span><span class=\"o\">:</span> <span class=\"s2\">&quot;addModel&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;next&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;onyx.Button&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Next&quot;</span><span class=\"p\">,</span> <span class=\"nx\">ontap</span><span class=\"o\">:</span> <span class=\"s2\">&quot;nextModel&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;label&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Models: &quot;</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;count&quot;</span><span class=\"p\">,</span> <span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;span&quot;</span><span class=\"p\">}]},</span>\n        <span class=\"p\">{</span><span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;label&quot;</span><span class=\"p\">,</span> <span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Showing: &quot;</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;showing&quot;</span><span class=\"p\">,</span> <span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s2\">&quot;span&quot;</span><span class=\"p\">}]}</span>\n    <span class=\"p\">],</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Transforms also accept a second parameter, which is set to\nthe string value of the direction.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">showingTransform</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">editingTransform</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span> <span class=\"o\">===</span> <span class=\"nx\">value</span><span class=\"o\">?</span> <span class=\"s2\">&quot;Done&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Edit&quot;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    },
    {
        "basename": "RootView.js",
        "isDirectory": false,
        "isFile": true,
        "path": "/source/views/RootView.js",
        "parent": "/source/views",
        "documentation": " <!-- generated from template for rootview.js -->      <div class=\"file\">   <div>     <span class=\"title\">RootView.js</span>     <span class=\"path\">source/views/RootView.js</span>   </div>             <div class=\"group\">       <div class=\"comments\">                </div>       <div class=\"source\">         <div class=\"highlight\"><pre></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <h2>The <code>Sample.RootView</code> kind</h2>\n\n<p>Every <code>enyo.Application</code> object starts with a single\n<em>view</em> (if any). In our application we designate our root\nto be this <em>kind</em>. Essentially every <em>application</em>'s <em>view</em>\nis the top of a tree of <em>views</em>.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre><span class=\"nx\">enyo</span><span class=\"p\">.</span><span class=\"nx\">kind</span><span class=\"p\">({</span></pre></div>       </div>     </div>             <div class=\"group\">       <div class=\"comments\">         <p>Note that our root <em>view</em> makes use of the namespace we've\nused consistently throughout the <em>kinds</em> we've defined.</p>       </div>       <div class=\"source\">         <div class=\"highlight\"><pre>    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.RootView&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">classes</span><span class=\"o\">:</span> <span class=\"s2\">&quot;mvc-app&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">layoutKind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;enyo.FittableRowsLayout&quot;</span><span class=\"p\">,</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span> <span class=\"nx\">kind</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Sample.Main&quot;</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">});</span>\n\n</pre></div>       </div>     </div>    </div>"
    }
]