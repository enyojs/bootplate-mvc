(function () {
  
    // The `enyo.Application` entry point - `enyo.App`
    // -----------------------------------------------
    // There is now a concept of an _application_, an _component_ that
    // has some additional functionality based on the premise that there
    // is only one application. At any point in the code of an app, the
    // top-level application object can be found at `enyo.application`
    // once it has started. Unless you modify it, in the `index.html` and
    // `debug.html` files it calls a new method, `enyo.start`. What it looks
    // for is the singleton instance generated by calling `enyo.App` and
    // passing it the properties for the `rootView` of the application.
    // The properties passed to `enyo.App` will constitute the base view
    // of your application and can always be reference one of several
    // ways: `enyo.application.rootView`, or the namespace created from
    // the `name` property that is passed to `enyo.App` - for example,
    // `Mvc.rootView` in our case here. That being said, without further
    // modification, your app will be ready to run and your root view
    // will be rendered as usual into the `document.body`.
    enyo.App({
        // Naming is key as this is assumed to be the default namespace of
        // the application. There is obviously no limit as to what namespaces
        // you choose to use for any of your objects, but for convention you
        // can always rely on the name you choose for your app.
        name: "Mvc",
        // You can always apply classes, even to the `rootView`.
        classes: "mvc-app",
        fit: true,
        layoutKind: "enyo.FittableRowsLayout",
        // Make sure to take a closer look at all of the sub-kind views in
        // this application as they do a lot of interesting things.
        components: [
            {name: "toolbar", kind: "Mvc.Toolbar"},
            {name: "main", kind: "Mvc.Main"}
        ]
    });
  
}());